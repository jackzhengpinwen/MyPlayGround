/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.zpw.myplayground;

import com.zpw.myplayground.internal.MyDefaultIncludeGitExtension;

import org.gradle.api.Plugin;
import org.gradle.api.file.DirectoryProperty;
import org.gradle.api.initialization.Settings;
import org.gradle.api.provider.ProviderFactory;

import java.io.File;

import javax.inject.Inject;

import static com.zpw.myplayground.internal.ProviderUtils.forUseAtConfigurationTime;

public abstract class MyIncludeGitPlugin implements Plugin<Settings> {

    public static final long DEFAULT_INTERVAL = 24 * 3600 * 1000;
    public static final String REFRESH_GIT_REPOSITORIES_PROPERTY = "refresh.git.repositories";

    @Inject
    protected abstract ProviderFactory getProviders();

    @Override
    public void apply(Settings settings) {
        System.out.println("MyIncludeGitPlugin apply()");

        // 创建 myGitRepositories 闭包，不仅用于设置数据，还可以调用插件的方法
        MyGitIncludeExtension gitRepositories = (MyGitIncludeExtension) settings
                .getExtensions()
                .create(MyGitIncludeExtension.class,
                        "myGitRepositories",
                        MyDefaultIncludeGitExtension.class,
                        settings);

        DirectoryProperty checkoutsDirectory = gitRepositories.getCheckoutsDirectory();
        // 给 DirectoryProperty 设置具体内容
        checkoutsDirectory.set(
                new File(settings.getSettingsDir(), "mycheckouts")
        );
        System.out.println("checkoutsDirectory is "
                + checkoutsDirectory.getAsFile().get().getAbsolutePath());

        gitRepositories.getRefreshIntervalMillis().convention(
                forUseAtConfigurationTime(getProviders().systemProperty(REFRESH_GIT_REPOSITORIES_PROPERTY))
                        .map(s -> s.isEmpty() ? 0L : Long.parseLong(s))
                        .orElse(DEFAULT_INTERVAL)
        );

        // 在 settings 配置结束后写入数据
        settings.getGradle().settingsEvaluated(
                s -> ((MyDefaultIncludeGitExtension) gitRepositories).writeCheckoutMetadata()
        );
    }

}
