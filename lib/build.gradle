plugins {
    // Write Gradle plugins...
    id 'java-gradle-plugin'
    // ...in Java...
    id 'java-library'
    // ...in Kotlin...
    id 'org.jetbrains.kotlin.jvm'
    // ...and test them with Groovy
    id 'groovy'
    // For demonstration purposes only.
    id 'maven-publish'
}

group = 'com.zpw.lib'
version = '1.0'

// -Dimpl (for 'implementation')
boolean impl = providers.systemProperty('impl').orNull != null

dependencies {
    implementation platform('org.jetbrains.kotlin:kotlin-bom')
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'com.google.truth:truth:1.1.3'
    implementation 'com.autonomousapps:testkit-truth:1.1'
    if (impl) {
        implementation 'com.android.tools.build:gradle:7.2.0-beta04'
    } else {
        compileOnly 'com.android.tools.build:gradle:7.2.0-beta04'
    }
    compileOnly('org.spockframework:spock-core:2.0-groovy-3.0') {
        exclude group: 'org.codehaus.groovy'
    }
    compileOnly gradleTestKit()
}

// Ensure build/functionalTest doesn't grow without bound when tests sometimes fail to clean up
// after themselves.
def deleteOldFuncTests = tasks.register('deleteOldFuncTests', Delete) {
    delete(layout.buildDirectory.file('functionalTest'))
}

// Some specs rely on the plugin as an external artifact
def publishToMavenLocal = tasks.named('publishToMavenLocal')

// Configure our test suites (an @Incubating feature)
testing {
    suites {
        // Configure the default test suite
        test {
            // JUnit5 (JUnit Jupiter) is the default
            useJUnitJupiter()
            dependencies {
                // Equivalent to `testImplementation ...` in the
                // top-level dependencies block
                implementation 'com.google.truth:truth:1.1.3'
            }
        }
        functionalTest(JvmTestSuite) {
            useSpock()

            dependencies {
                // functionalTest test suite depends on the production code in tests
                implementation project
                implementation 'com.google.truth:truth:1.1.3'
                implementation 'com.autonomousapps:testkit-truth:1.1'
            }

            targets {
                all {
                    testTask.configure {
                        shouldRunAfter(test)
                        dependsOn(deleteOldFuncTests)

                        systemProperty('impl', impl)
                        systemProperty('pluginVersion', version)

                        maxParallelForks = Runtime.getRuntime().availableProcessors() / 2

                        beforeTest {
                            logger.lifecycle("Running test: $it")
                        }
                    }
                }
            }
        }
    }
}

// Define our plugin
gradlePlugin {
    plugins {
        meaningOfLife {
            id = 'com.zpw.lib.meaning-of-life'
            implementationClass = 'com.zpw.lib.MeaningOfLifePlugin'
        }
    }

    // TestKit needs to know which source set to use. nb: this must come below `testing`, because that
    // is what creates our functionalTest DSL objects.
    testSourceSets(sourceSets.functionalTest)
}

// Minimum Java version of 11
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(11))
    }
}

// Groovy code can depend on Kotlin code
def compileFunctionalTestKotlin = tasks.named('compileFunctionalTestKotlin')
tasks.named('compileFunctionalTestGroovy', AbstractCompile) {
    dependsOn compileFunctionalTestKotlin
    classpath += files(compileFunctionalTestKotlin.get().outputs.files)
}

// If you run `check`, it will also run our functional tests
tasks.named('check') {
    dependsOn testing.suites.functionalTest
}

// Gradle plugins benefit from this argument
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        freeCompilerArgs += '-Xsam-conversions=class'
    }
}